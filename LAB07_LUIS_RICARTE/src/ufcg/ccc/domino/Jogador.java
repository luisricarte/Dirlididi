package ufcg.ccc.domino;

import java.util.LinkedList;
import java.util.List;

import ufcg.ccc.domino.Jogada.TipoJogada;
import ufcg.ccc.domino.estrategia.EstrategiaDeJogo;
import ufcg.ccc.domino.estrategia.EstrategiaInvalidaException;
import ufcg.ccc.domino.estrategia.VisaoDaMesa;

/**
 * Encapsula as informaÁıes de um jogador em uma partida de dominÛ.
 *
 */
public class Jogador {

	private EstrategiaDeJogo estrategia;
	private List<Peca> mao;
	private String nome;
	private Jogada ultimaJogada;
	private Peca ultimaPeca;
	private int vitorias;
	private int cruzada;
	private int carroca;
	private int laelo;
	private int batidaUnica;
	
	//private Peca ultimaPeca;
	//parte d sofia
	
	public int getCruzada() {
		return cruzada;
	}

	public int getCarroca() {
		return carroca;
	}

	public int getLaelo() {
		return laelo;
	}

	public int getBatidaUnica() {
		return batidaUnica;
	}

	public void setCruzada() {
		this.cruzada ++;
	}

	public void setCarroca() {
		this.carroca++;
	}

	public void setLaelo() {
		this.laelo++;
	}

	public void setBatidaUnica() {
		this.batidaUnica++;
	}
	
	// atÈ aqui
	
	/**
	 * Cria um jogador
	 * 
	 * @param nome       Id do jogador
	 * @param estrategia A estrat√©gia para decidir a pr√≥xima jogada
	 * @param maoJogador A m√£o inicial do jogador, com suas pe√ßas
	 */
	public Jogador(String nome, EstrategiaDeJogo estrategia, List<Peca> maoJogador) {
		
		this.nome = nome;
		this.estrategia = estrategia;
		this.mao = new LinkedList<>(maoJogador);
		this.ultimaJogada = null;
	}

	public int getVitorias() {
		return vitorias;
	}

	public void setVitorias(int vitorias) {
		this.vitorias = vitorias;
	}

	/**
	 * @return O nome do jogador
	 */
	public String getNome() {
		return nome;
	}

	/**
	 * Decide a pr√≥xima jogada a ser feita pelo jogador dado o estado da mesa.
	 * Verifica se a decis√£o da estrat√©gia √© para uma pe√ßa que est√° de fato na m√£o
	 * do jogador.
	 * 
	 * @param mesa A vis√£o da mesa, mostrando as pe√ßas jogadas e pontas.
	 * @return A Jogada decidida.
	 * @throws EstrategiaInvalidaException Caso a estrat√©goa decida jogar uma pe√ßa
	 *                                     que n√£o est√° na m√£o do jogador.
	 */
	public Jogada decideJogada(VisaoDaMesa mesa) throws EstrategiaInvalidaException {
        Jogada jogada = this.estrategia.decideJogada(mesa, mao);

        if (jogada.getTipo() != TipoJogada.PASSA) {
            Peca pecaJogada = jogada.getPeca();
            boolean realmenteTem = mao.contains(pecaJogada);
            if (!realmenteTem) {
                throw new EstrategiaInvalidaException(nome + " tentou jogar peÁa que n„o tem: " + pecaJogada);
            }
            this.ultimaPeca = pecaJogada;
        }
        this.ultimaJogada = jogada;
        return jogada;
    }
	
	/**
	 * Retira uma pe√ßa da m√£o do jogador. √â ncess√°rio quando a pe√ßa √© posta na mesa.
	 * 
	 * @param peca A pe√ßa a retirar.
	 */
	public void removeDaMao(Peca peca) {
		this.mao.remove(peca);
	}

	/**
	 * N√∫mero de pe√ßas na m√£o do jogador.
	 * 
	 * @return pe√ßas na m√£o ainda por jogar.
	 */
	public int getNumPecas() {
		return mao.size();
	}

	@Override
	public String toString() {
		return this.getNome() + (ultimaJogada == null ? "" : ", joga: " + ultimaJogada.toString()) + ", m„o: "
				+ mao.toString();
	}
	

	/**
	 * @return A √∫ltima jogada desse jogador. Null se n√£o h√°.
	 */
	public Jogada getUltimaJogada() {
		return ultimaJogada;
	}
	
	/**
	 * @return CÛpia da m„o disponÌel para esse jogador.
	 */
	public List<Peca> getMao() {
		return new LinkedList<>(mao);
	}
	public int somaPecas() {
		int valorPecas = 0;
		
		for(int k = 0; k < mao.size(); k++) {
			valorPecas += mao.get(k).somalados();
		}
		return valorPecas;
	}
	public Peca getUltimaPeca() {
		return this.ultimaPeca;
	}
	
}
